exetype: ~static
summary: A command-line tool to generate compilation database for clang tooling
src-url: https://github.com/rizsotto/Bear/archive/refs/tags/3.1.6.tar.gz
src-sha: 99cd891eec6e89b734d7cafe0e623dd8c2f27d8cbf3ee9bc4807e69e5c8fb55c
license: GPL-3.0-or-later
dep-pkg: grpc nlohmann-json spdlog
dep-upp: grpc-plugins

dopatch: |
    if [ "$TARGET_PLATFORM_NAME" = macos ] ; then
        gsed -i 's|spdlog::spdlog|spdlog::spdlog -lresolv|' source/intercept/CMakeLists.txt
    fi

install: |
    cmakew \
        -DENABLE_UNIT_TESTS=OFF \
        -DENABLE_FUNC_TESTS=OFF

dotweak: |
    cat > bin/bear.c <<EOF
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>

    #include <unistd.h>
    #include <limits.h>

    #if defined(__APPLE__)
    // https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/dyld.3.html
    #include <mach-o/dyld.h>
    #endif

    int main(int argc, char* argv[]) {
    #if defined(__APPLE__)
        uint32_t bufSize = 0U;
        _NSGetExecutablePath(NULL, &bufSize);

        char selfExePath[bufSize];
        _NSGetExecutablePath(selfExePath, &bufSize);

        int n = bufSize - 1;
    #elif defined(__linux__)
        char selfExePath[PATH_MAX];

        int n = readlink("/proc/self/exe", selfExePath, PATH_MAX);

        if (n == -1) {
            perror("/proc/self/exe");
            return 1;
        }

        selfExePath[n] = '\0';
    #endif

        ////////////////////////////////////////////////////

        int slashIndex = -1;

        char realExePath[n + 5];

        for (int i = 0; i < n; i++) {
            realExePath[i] = selfExePath[i];

            if (selfExePath[i] == '/') {
                slashIndex = i;
            }
        }

        realExePath[n    ] = '.';
        realExePath[n + 1] = 'e';
        realExePath[n + 2] = 'x';
        realExePath[n + 3] = 'e';
        realExePath[n + 4] = '\0';

        ////////////////////////////////////////////////////

        if (argv[1] == NULL || strcmp(argv[1], "intercept") == 0 || strcmp(argv[1], "citnames") == 0) {
            argv[0] = realExePath;
            execv (realExePath, argv);
            perror(realExePath);
            return 255;
        }

        ////////////////////////////////////////////////////

        const char * const s1 = "../lib/bear/libexec.so";
        const char * const s2 = "../lib/bear/wrapper";
        const char * const s3 = "../lib/bear/wrapper.d";

        ////////////////////////////////////////////////////

        char libexecFilePath[slashIndex + 30];

        for (int i = 0; i <= slashIndex; i++) {
            libexecFilePath[i] = selfExePath[i];
        }

        char * p = libexecFilePath + slashIndex + 1;

        for (int i = 0; ; i++) {
            p[i] = s1[i];

            if (s1[i] == '\0') {
                break;
            }
        }

        ////////////////////////////////////////////////////

        char wrapperFilePath[slashIndex + 30];

        for (int i = 0; i <= slashIndex; i++) {
            wrapperFilePath[i] = selfExePath[i];
        }

        p = wrapperFilePath + slashIndex + 1;

        for (int i = 0; ; i++) {
            p[i] = s2[i];

            if (s2[i] == '\0') {
                break;
            }
        }

        ////////////////////////////////////////////////////

        char wrapperdFilePath[slashIndex + 30];

        for (int i = 0; i <= slashIndex; i++) {
            wrapperdFilePath[i] = selfExePath[i];
        }

        p = wrapperdFilePath + slashIndex + 1;

        for (int i = 0; ; i++) {
            p[i] = s3[i];

            if (s3[i] == '\0') {
                break;
            }
        }

        ////////////////////////////////////////////////////

        int   argc3 = 8;
        char* argv3[argc3];

        argv3[0] = (char*)"--bear-path"; 
        argv3[1] = selfExePath,
        argv3[2] = (char*)"--library";
        argv3[3] = libexecFilePath;
        argv3[4] = (char*)"--wrapper";
        argv3[5] = wrapperFilePath,
        argv3[6] = (char*)"--wrapper-dir";
        argv3[7] = wrapperdFilePath;

        ////////////////////////////////////////////////////

    #if defined(__linux__) && defined(__USE_DYNAMIC_LOADER__)
        const char * dynamicLoaderName = "DYNAMIC_LOADER_FILENAME";
        const char * libraryPathRelativeToSelfExePath = "/LIBRARY_PATH_RELATIVE_TO_SELF_EXE_PATH";

        ////////////////////////////////////////////////////

        char libraryPath[PATH_MAX];

        for (int i = 0; i <= slashIndex; i++) {
            libraryPath[i] = selfExePath[i];
        }

        for (int i = 1; ; i++) {
            libraryPath[slashIndex + i] = libraryPathRelativeToSelfExePath[i];

            if (libraryPathRelativeToSelfExePath[i] == '\\0') {
                break;
            }
        }

        ////////////////////////////////////////////////////

        char dynamicLoaderPath[PATH_MAX];

        int ret = snprintf(dynamicLoaderPath, PATH_MAX, "%s/%s", libraryPath, dynamicLoaderName);

        if (ret < 0) {
            perror(NULL);
            return 2;
        }

        ////////////////////////////////////////////////////

        char* argv2[argc + argc3 + 5 + 1];

        argv2[0] = dynamicLoaderPath;
        argv2[1] = (char*)"--library-path";
        argv2[2] = libraryPath;
        argv2[3] = (char*)"--argv0";
        argv2[4] = selfExePath;

        n = 5;
    #else
        char* argv2[argc + argc3 + 1];
        n = 0;
    #endif

        argv2[n++] = realExePath;

        for (int i = 0; i < argc3; i++) {
            argv2[n++] = argv3[i];
        }

        for (int i = 1; i < argc; i++) {
            argv2[n++] = argv[i];
        }

        argv2[n] = NULL;

        //for (int i = 0; argv2[i] != NULL; i++) {
        //    fprintf(stderr, "%d:%s\n", i, argv2[i]);
        //}

        execv (argv2[0], argv2);
        perror(argv2[0]);
        return 255;
    }
    EOF
